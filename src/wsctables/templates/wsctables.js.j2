window.wsc = (function() {
  // Table reference.
  let table;

  // Current table data, updated on a loop.
  let data;

  // URL for route kmz
  let table_url;

  /**
   * API utilities.
   */
  const api = (function() {
    const telemetry = new URL('{{ url_for("index", _external=True) }}');

    // Generic fetch.
    async function get(base, uri, params = {}) {
      const query = new URLSearchParams(params);
      const search = query.toString();
      const url = `${base.href}/${uri}` + (search ? `?${search}` : '');

      const res = await fetch(url, {
        mode: 'cors',
      });

      if (!res.ok) {
        const message = `${res.status}: ` + await res.text();
        // throw new Error(message);
        return null;
      }

      const json = await res.json();
      return json;
    }

    function renderTable(data) {
      if (!data) {
        return '<p>No data available</p>';
      }

      rows = [];
      columns = [];

      teamdata = data["teamdata"];

      columns = Object.keys(teamdata[0]).filter(cat => cat !== 'Team' && cat !== 'Name');

      for (const entry of teamdata) {
        if (entry.Team == "")
          continue;

        row = [];
        row.push('<tr>');
        row.push(`<th>${entry.Team}</th>`);
        row.push(`<th>${entry.Name}</th>`);
        for (const column of columns) {
          status = entry[column];
          row.push(`<td>${status}</td>`);
        }
        row.push('</tr>');

        rows.push(row.join(''));
      }

      header = [];
      header.push('<th>Team</th>');
      header.push('<th>Name</th>');
      for (const column of columns) {
        header.push(`<th>${column}</th>`);
      }
      header.push('</tr>');

      return `<table border="1">
        <thead>
          ${header.join('')}
        </thead>
        <tbody>
          ${rows.join('')}
        </tbody>
      </table>`;
    }

    // Fetch last positions for all cars.
    async function getTable() {
      rdata = await get(telemetry, table_url);
      return rdata;
    }

    return {
      getTable,
      renderTable,
    }
  })();


  /**
   * Looping utility.
   * This is triggered on the map init.
   */
  const loop = (function() {
    let timer = 0;

    function start(timeout = 5000) {
      clearInterval(timer);

      timer = setInterval(async () => {
        data = await api.getTable(table_url);
        table.innerHTML = api.renderTable(data);
      }, timeout);
    }

    function stop() {
      clearInterval(timer);
    }

    return {
      start,
      stop,
    }
  })();


  /**
   * Live time-ago for fun and profit.
   */
  const timeago = (function() {
    function register() {
      const elements = document.querySelectorAll('[data-timeago]');
      for (const element of elements) {
        render(element);
      }
    }

    function render(element) {
      const when = parseInt(element.getAttribute('data-timeago'));
      element.removeAttribute('date-timeago');

      (function inner() {
        const seconds = Math.floor((Date.now() - when) / 1000);

        element.textContent = format(seconds);

        if (document.body.contains(element)) {
          setTimeout(inner, 1000);
        }
      })();
    }

    function format(seconds) {
      switch (true) {
        case seconds < 60: return `${seconds} seconds`;
        case seconds < 3600: return `${Math.floor(seconds / 60)} minutes`;
        case seconds < 86400: return `${Math.floor(seconds / 3600)} hours`;
        case seconds < 604800: return `${Math.floor(seconds / 86400)} days`;
        default: return `${Math.floor(seconds / 604800)} weeks`;
      }
    }

    return {
      register,
      render,
      format,
    }
  })();

  /**
   * Entry point.
   */
  async function initTable(new_table_url) {
    if (new_table_url) {
      // If a new table URL is provided, use it.
      table_url = new_table_url;
    }

    if (table) {
      throw new Error('already initialized');
    }

    table = document.getElementById("table");

    data = await api.getTable(table_url);

    console.log('Table data:', data);

    // Loop it.
    loop.start();
  }

  // Something for the map to tell us it's ready.
  window.__wscinitTable = initTable;
  // window.onload = initTable;


  /**
   * Exports.
   */
  return {
    api,
    loop,
    getTable: () => table,
  }
})();
